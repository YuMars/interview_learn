1. 实现原理（结构设计、通知如何存储的、 name & observer & SEL 之间的关系等）

 named、nameless表（maptable）---  MapNode /|---key（name）
                                          \|---value（maptable）---  MapNode  |---key（object）           / observer
                                                						      |---value（Observation对象）- selector

2. 通知的发送时同步的，还是异步的
post是同步的，NSNotificationQueue根据NSPostingStyle的逻辑，根据runloop延时发送



3. NSNotificationCenter 接受消息和发送消息是在⼀个线程⾥吗？如何异步发送消息
异步线程发送通知则响应函数也是在异步线程,主线程发送则在主线程.
开启异步线程发送通知



4. NSNotificationQueue 是异步还是同步发送？在哪个线程响应
NSNotificationCenter都是同步发送的，而这里介绍关于NSNotificationQueue的异步发送，从线程的角度看并不是真正的异步发送，或可称为延时发送，它是利用了runloop的时机来触发的.
异步线程发送通知则响应函数也是在异步线程,主线程发送则在主线程.



5. NSNotificationQueue 和 runloop 的关系
NSNotificationQueue依赖runloop. 因为通知队列要在runloop回调的某个时机调用通知中心发送通知.从下面的枚举值就能看出来
// 表示通知的发送时机
typedef NS_ENUM(NSUInteger, NSPostingStyle) {
    NSPostWhenIdle = 1, // runloop空闲时发送通知
    NSPostASAP = 2, // 尽快发送，这种时机是穿插在每次事件完成期间来做的
    NSPostNow = 3 // 立刻发送或者合并通知完成之后发送
};


6. 如何保证通知接收的线程在主线程
1.在主线程指定队列
 (id <NSObject>)addObserverForName:(nullable NSNotificationName)name object:(nullable id)obj queue:(nullable NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *note))block
2.NSMachPort的方式 通过在主线程的runloop中添加machPort，设置这个port的delegate，通过这个Port其他线程可以跟主线程通信，在这个port的代理回调中执行的代码肯定在主线程中运行，所以，在这里调用NSNotificationCenter发送通知即可


7. ⻚⾯销毁时不移除通知会崩溃吗
iOS9.0之前，会crash，原因：通知中心对观察者的引用是unsafe_unretained，导致当观察者释放的时候，观察者的指针值并不为nil，出现野指针.
iOS9.0之后，不会crash，原因：通知中心对观察者的引用是weak。



8. 多次添加同⼀个通知会是什么结果？多次移除通知呢
多次添加同一个通知，会导致发送一次这个通知的时候，响应多次通知回调。 多次移除通知不会产生crash。



9. 下⾯的⽅式能接收到通知吗？为什么
// 接收通知
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNotification:) name:@"TestNotification" object:@1];
// 发送通知
[NSNotificationCenter.defaultCenter postNotificationName:@"TestNotification" object:nil];

主要原因是第一题图示的name、object、observer、selector唯一对应性。

10.下面为什么又能接受通知？
// 接收通知
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handleNotification:) name:@"TestNotification" object:nil];
// 发送通知
[NSNotificationCenter.defaultCenter postNotificationName:@"TestNotification" object:@1];

在第一题图示的name、object、observer、selector唯一对应性的基础上，发送通知的时候，底层代码对object，object == nil，object =! nil的时候都发送了通知
