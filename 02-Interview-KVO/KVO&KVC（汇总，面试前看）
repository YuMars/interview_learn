# KVO

KVO全称Key-Value-Observing,俗称"键值监听"，可以用于监听某个对象属性值的改变

`使用KVO监听后,会生成NSKVONotifying_类名的一个类,是一个继承自原先类的子类，由runtime在运行过程中动态生成的一个类`
重写了`class`,`dealloc`, `_isKVO`三个方法

- `NSKVONotifying_Person`是`Person`的一个子类 
- `[person setAge:]` 调用了`[NSKVONotifying_Person setage:]`,调用了`_NSSetIntValueAndNotify`

> - p (IMP)+内存地址 可以打印调用的方法名

`_NSSet*ValueAndNotify`的内部实现:
- [self willChangeValueForKey:@""];
- [super setValue:];
- [self didChangeValueForKey:@""];

Q: KVO的本质是什么
A: 利用Runtime 
- 1.API动态生成一个子类，并且让instance对象的isa指向这个全新的子类，子类NSKVONotifying_类名
- 2.当修改instance对象的属性时，会调用Foundation的_NSSet*ValueaAndNofity函数
- _NSSet*ValueAndNotify:{ 1.willChangeValueForKey: 2.[super setValue:] 3.didChangeValueForKey:} 
- 3.内部调用observeValueForKeyPath:ofObject:change:context:
    
Q: 如何手动触发KVO
A: 
- [self willChangeValueForKey:@""] 
- [self didChangeValueForKey:@""]

# KVC

KVC全称Key-Value Coding，俗称"键值编码"，可以通过一个key来访问某个属性
`setValue:forKey:`
`setValue:forKeyPath:`
`valueForKey:`
`valueForKeyPath:`

[self.person setValue:value forKeyPath:@"cat.age"]

Q: 通过KVC修改属性会触发KVO吗
A: 会触发(通过KVC修改成员变量也会触发)

## 1
setValue:forKey:顺序
1.setKey: _setKey:顺序查找方法
2.accessInstanceVariablesDirectly(是否允许直接访问成员变量)  
->第一种没找的情况
    2.1 设置No后，会调用setValue:forUndefinedKey:
    2.2 设置YES后，按照_key,_isKey,key,isKey的顺序查找成员变量，失败后会调用setValue:forUndefinedKey:
> {
> `setKey:`
> `_setKey:`
> `_key`
> `_isKey`
> `key`
> `isKey`
> }

## 2
valueForKey:顺序
1.getKey,key,isKey,_key顺序查找方法
2.accessInstanceVariablesDirectly(是否允许直接访问成员变量) -> 第一种没找到的情况
    2.1 设置NO后，会调用valueForUndefinedKey:
    2.2 设置YES后，按照_key, _isKey, key, isKey的顺序查找成员变量
> 
> {
> `getKey:`
> `key:`
> `isKey:`
> `_key:`
> `_key`
> `_isKey`
> `key`
> `isKey`
> }

Q: KVC赋值的过程是什么？原理是什么？
A: 上面的顺序
