网络优化

	速度：
		正常的网络请求需要经过的流程：
			1.DNS解析，请求DNS服务器，获取域名对应的IP地址
			2.与服务器建立连接，包括tcp三次握手，安全协议同步流程
			3.连接建立完成，发送和接收数据，解码数据
		优化点：
			1.直接使用IP地址，去除DNS解析步骤
			2.不要每次请求都建立连接，复用连接或一直使用同一条连接（长连接）
			3.压缩数据，减小传输的数据大小

		DNS
			DNS完整的解析流程很长，先会从本地系统缓存取，若没有就到最近的DNS服务器取，若没有再从主域名服务器取，每一层都有缓存，但为了域名解析的实时性，每一层缓存都有过期时间，这种DNS解析机制有几个缺点：
				1.缓存时间设置长，域名更新不及时，设置短，大量DNS解析请求影响请求速度。
				2.域名劫持，容易收中间人攻击，或被运营商劫持，把域名解析到第三方IP地址，据统计劫持率会达到7%
				3.DNS解析过程不受控制，无法保证解析到最快的IP
				4.一次请求只能解析一个域名
			为了解决这些问题，就有了 HTTPDNS，原理很简单，就是自己做域名解析的工作，通过 HTTP 请求后台去拿到域名对应的 IP 地址，直接解决上述所有问题：
				1.域名解析与请求分离，所有请求都直接用IP地址，无需 DNS 解析，APP 定时请求 HTTPDNS 服务器更新IP地址即可。
				2.通过签名等方式，保证 HTTPDNS 请求的安全，避免被劫持。
				3.DNS 解析由自己控制，可以确保根据用户所在地返回就近的 IP 地址，或根据客户端测速结果使用速度最快的 IP。
				4.一次请求可以解析多个域名。

		连接
			复用连接，不用每次请求都建立连接，而是有效率的复用连接
				Keep-alive
					HTTP协议里有个keep-alive，HTTP/1.1默认开启，一定程度上缓解了每次请求都要进行TCP三次握手建立连接的耗时。原理是请求完成后不立即释放链接，而是放入连接池中，若这时有另外一个请求要发出，请求的域名和端口是一样的，就直接拿出连接池中的连接进行发送和接收数据，少了建立连接的耗时。
					实际上现在无论是客户端还是浏览器都默认开启了keep-alive，对同域名不再有每发一次请求就建立一次连接情况，纯短链接已经不存在，但有个问题，就是这个keep-alive的连接一次只能发送接收一个请求，在上一个请求处理完成之前，无法接受新的请求。若同时发起多个请求，就有两种情况：
						1.若串行发送请求，可以一直复用一个连接，但速度很慢，每个请求都要等待上个请求完成再进行发送。
						2.若并行发送这些请求，那么首次每个请求都要进行tcp三次握手建立新的连接，虽然第二次可以复用连接池里这堆连接，但若连接池里保持的连接过多，对服务端资源产生较大浪费，若限制了保持的连接数，并行请求里超出的连接仍每次要建连。
					对这个问题，新一代协议 HTTP2 提出了多路复用去解决。
				多路复用
					HTTP2的多路复用机制一样是复用连接，但它复用的这条连接支持同时处理多条请求，所有请求都可以并发在这条连接上进行，也就解决了上面说的并发请求需要建立多条连接带来的问题，网络上有张图可以较形象地表现这个过程：
					[图1-1]
					HTTP1.1的协议里，在一个连接里传送数据都是串行顺序传送的，必须等上一个请求全部处理完后，下一个请求才能进行处理，导致这些请求期间这条连接并不是满带宽传输的，即使是HTTP1.1的pipelining可以同时发送多个request，但response仍是按请求的顺序串行返回，只要其中一个请求的response稍微大一点或发生错误，就会阻塞住后面的请求。

					HTTP2 这里的多路复用协议解决了这些问题，它把在连接里传输的数据都封装成一个个stream，每个stream都有标识，stream的发送和接收可以是乱序的，不依赖顺序，也就不会有阻塞的问题，接收端可以根据stream的标识去区分属于哪个请求，再进行数据拼接，得到最终数据。

					多路复用这个词：多路可以认为是多个连接，多个操作，复用就是字面上的意思，复用一条连接或一个线程。HTTP2这里是连接的多路复用，网络相关的还有一个I/O的多路复用(select/epoll)，指通过事件驱动的方式让多个网络请求返回的数据在同一条线程里完成读写。

					客户端来说，iOS9 以上 NSURLSession 原生支持 HTTP2，只要服务端也支持就可以直接使用，Android 的 okhttp3 以上也支持了 HTTP2，国内一些大型 APP 会自建网络层，支持 HTTP2 的多路复用，避免系统的限制以及根据自身业务需要增加一些特性，例如微信的开源网络库 mars，做到一条长连接处理微信上的大部分请求，多路复用的特性上基本跟 HTTP2 一致。

				 TCP对头堵塞
				 	HTTP2的多路复用看起来是完美的解决方案，但还有个问题，就是队头阻塞，这是受限于TCP协议，TCP协议为了保证数据的可靠性，若传输过程中一个TCP包丢失，会等待这个包重传后，才会处理后续的包。HTTP2的多路复用让所有请求都在同一条连接进行，中间有一个包丢失，就会阻塞等待重传，所有请求也就被阻塞了。

					对于这个问题不改变 TCP 协议就无法优化，但TCP协议依赖操作系统实现以及部分硬件的定制，改进缓慢，于是GOOGLE提出QUIC协议，相当于在UDP协议之上再定义一套可靠传输协议，解决TCP的一些缺陷，包括队头阻塞。具体解决原理网上资料较多，可以看看。

					QUIC处于起步阶段，少有客户端接入，QUIC协议相对于HTTP2最大的优势是对TCP队头阻塞的解决，其他的像安全握手0RTT/证书压缩等优化TLS1.3已跟进，可以用于HTTP2，并不是独有特性。TCP队头阻塞在HTTP2上对性能的影响有多大，在速度上 QUIC 能带来多大提升待研究。






















http://blog.cnbang.net/tech/3531/?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io