AutoRelease

{ __AtAutoreleasePool __autoreleasepool; 
    // objc_autoreleasePoolPush();
    string = (NSString *)&__NSConstantStringImpl__var_folders_h6_5t3f7nb176g5jy6p602g48f80000gn_T_ViewController_3546ef_mi_1;(objc_msgSend),sel_registerName("autorelease ")
    // objc_autoreleasePoolPop(atautoreleasepoolobj);
}

struct __AtAutoreleasePool {
  __AtAutoreleasePool() { // 构造函数（在创建结构体变量时候使用）
    atautoreleasepoolobj = objc_autoreleasePoolPush();
  }

  ~__AtAutoreleasePool() { // 析构函数（在销毁结构体变量时候使用）
    objc_autoreleasePoolPop(atautoreleasepoolobj);
  }

  void * atautoreleasepoolobj;
};

AutoReleasePoolPage的结构
1.每个AutoReleasePoolPage对象占用4096字节内存，除了用来存放它内部的成员变量，剩下的空间用来存放autorelease对象的地址
2.所有的AutoReleasePoolPage对象通过双向链表的形式连接在一起

struct AutoreleasePoolPageData
{
    magic_t const magic;
    __unsafe_unretained id *next;
    pthread_t const thread;
    AutoreleasePoolPage * const parent; // 上一个AutoreleasePoolPageData
    AutoreleasePoolPage *child; // 下一个AutoreleasePoolPageData
    uint32_t const depth; // 当前表中AutoRelease对象个数
    uint32_t hiwat; // 56个字节

    (POOL_BOUNDARY)

    // 4096-56，其他都是AutoRelease对象地址 
    // 后面看到是 1<<14大小（32768）
    AutoreleasePoolPageData(__unsafe_unretained id* _next, pthread_t _thread, AutoreleasePoolPage* _parent, uint32_t _depth, uint32_t _hiwat)
        : magic(), next(_next), thread(_thread),
          parent(_parent), child(nil),
          depth(_depth), hiwat(_hiwat) {

    }
};

-调用push方法会将一个POOL_BOUNDARY入栈，并且返回其存放的内存地址
-调用pop方法时传入一个POOL_BOUNDARY的内存地址，会从最后一个入栈的AutoRelease对象开始释放，在内存往回释放直到遇到POOL_BOUNDARY
- __unsafe_unretained id *next; 会指向下一个可以存放AutoRelease对象的地址


extern void _objc_autoreleasePoolPrint(void);可以打印AutoReleasePoolPage里面的内容

什么时候释放：
RunLoop

