
https://www.jianshu.com/p/e136ec79235c
https://www.cnblogs.com/skywang12345/p/3245399.html

红黑树
	红黑树是一种自平衡二叉查找树，被称为“对称二叉B树”。红黑树的结构复杂，但有良好的最坏情况运行时间，实践中高效：可以在O(log n)时间内完成查找、插入和删除。红黑树相对于AVL树来说，牺牲了部分平衡性以换取插入和删除操作时少量的旋转操作，整体来说性能要优于AVL树。

	红黑树是2-3-4树的一种等同。换句话说，对于每个2-3-4树，都存在至少一个数据元素是同样次序的红黑树。在2-3-4树上的插入和删除操作也等同于在红黑树中颜色翻转和旋转。这使得2-3-4树成为理解红黑树背后的逻辑的重要工具，这也是很多介绍算法的教科书在红黑树之前介绍2-3-4树的原因，尽管2-3-4树在实践中不经常使用。

性质：
	1：每个节点要么是黑色，要么是红色。
	2：根节点是黑色。
	3：每个叶子节点（NIL）是黑色。
	4：每个红色结点的两个子结点一定都是黑色。（或者说从每个叶子到根的所有路径上不能有两个连续的红色节点。）
	5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。
[图1]
	上面是一个具体的红黑树的图例。
	这些性质确保了红黑树的关键特征：从根到叶子的最长的可能路径不多余最短可能路径的两倍长。红黑树不是一个完美平衡二叉查找树，从图1中可以看到，6号子树比1号子子树高。

自平衡
左旋：给定一个节点，以此节点作为支点（旋转节点），其右子节点变为旋转节点的父节点，右子节点的左节点变为旋转节点的右子节点，左子节点保持不变。[图2]
右旋：给定一个节点，以此节点作为支点（旋转节点），其左子节点变为旋转节点的父节点，左子节点的右节点变为旋转节点的左子节点，右子节点保持不变。[图3]
变色：节点的颜色由红变黑或由黑变红。

# 查找 
	1.从根节点开始查找，把根节点设置为当前节点
	2.若当前节点为空，返回null
	3.若当前节点不为空，用当前节点的key跟查找key做比较。
		3.1 当前节点key等于查找key，那么当前节点就是查找目标，返回当前节点
		3.2 当前节点key小于查找key，那么当前节点的右子节点设为当前节点，重复步骤2
		3.3 当前节点key大于查找key，那么当前节点的左子节点设为当前节点，重复步骤2

# 插入
	插入操作分为两个步骤
		1.查找插入的位置
			1.1 从根节点开始查找，把根节点设置为当前节点
			1.2 若根节点为空，插入节点作为根节点，结束
			1.3 若根节点不为空，那么把根节点当做当前节点
				1.3.1 若当前节点为null，返回当前节点的父节点，结束
				1.3.2 当前节点key等于查找key，那么当前节点就是插入节点，更新节点的值，结束
				1.3.3 当前节点key小于查找key，那么当前节点的右子节点设为当前节点，重复步骤1.3.1
				1.3.4 当前节点key大于查找key，那么当前节点的左子节点设为当前节点，重复步骤1.3.1
			1.4 找到插入的节点位置后，把插入的节点设置为红色（红色在父节点为黑色时，红黑树的黑色平衡没被破坏，不需要做自平衡，如果插入的节点是黑色，那么插入位置的叶子节点总是多1，需要做自平衡）
		2.插入后自平衡
			2.1 红黑树为空
				2.1.1 把插入节点作为根节点，由于根节点是黑色，需要把插入节点由红色改为黑色
			2.2 插入节点的key已经存在
				2.2.1 插入前红黑树已经平衡，所以只要把插入节点设为需要替代节点的颜色，再更新值就完成插入
			2.3 插入节点的父节点为黑色节点
				2.3.1 



# 删除