1. block的内部实现，结构体是什么样的
 block也是一个对象，主要分为Imp和Des结构体

 struct __block_impl {
    void *isa; // 指针。指向block的类型 (_NSGlobalBlock__(_NSConcreteGloalBlock) _NSStackBlock__(_NSConcreteStackBlock) _NSMallocBlock__(_NSConcreteMallocBlock))
    int Flags;
    int Reserved;
    void *FuncPtr;
    (void *(void *,...))invoke
    variables
    (struct Block_descriptor *)descriptor // block允许环境
};

static struct __ViewController__viewDidLoad_block_desc_0 {
  size_t reserved;
  size_t Block_size; // block占用内存大小
} __ViewController__viewDidLoad_block_desc_0_DATA = { 
    0, 
    sizeof(struct __ViewController__viewDidLoad_block_impl_0)
};





2. block是类吗，有哪些类型
有三种，NSConcreteGloalBlock，NSConcreteStackBlock，NSConcreteMallocBlock。根据Block对象创建时所处数据区不同⽽进⾏区别。
_NSGlobalBlock_             没有访问auto变量
_NSStackBlock_              访问了auto变量
_NSMallocBlock_             _NSStackBlock_调用类copy






3. 一个int变量被__block修饰与否的区别?
无__block是int值copy, __block int 是int指针copy

外部变量有四种类型：
	⾃动变量 auto
	静态变量 static
	静态全局变量 static (int)
	全局变量 (int)

静态全局、全局变量会自动引用，不需要通过结构体传入
static 静态变量直接在block中保存了指针
auto 自动变量在最开始的时候直接捕获值





4. block在修改NSMutableArray，需不需要添加__block
不需要。本身block内部就捕获了NSMutableArray指针，除非需要修改指针指向的对象。NSMutableArray一般只修改内存数据






5. block怎么进行内存管理的

判断block->flag如果是NSGloablBlock的时候，直接返回block，如果是NSMallocBlock,flag+1，返回block，如果是NSStackBlock的话，复制到堆上，更新flag为BLOCK_NEED_FREE，引用计数+1,更新isa。

判断block->flag，如果是NSMallocBlock,flag-1，并且count>0，返回block。如果count == 0，释放堆上block以及捕获的对象变量。如果是NSGloablBlock的时候，直接返回block

//这里传入的参数实际上就是Block
void *_Block_copy(const void *arg) {
    return _Block_copy_internal(arg, WANTS_ONE);
}

static void *_Block_copy_internal(const void *arg, const int flags) {
    struct Block_layout *aBlock;

    //1.如果传递的参数为NULL，返回NULL。
    if (!arg) return NULL;
    
    //2.参数类型转换。转为指向Block_layout结构体的指针。Block_layout结构体请回顾文章开头，相当于clang转换后的__main_block_impl_0结构体，包括指向block的实现功能的指针和各种数据。
    aBlock = (struct Block_layout *)arg;

    //3.如果block的flags包含BLOCK_NEEDS_FREE，表明它是堆上的Block（为什么？见第7步注释）
    //增加引用计数，返回相同的block
    if (aBlock->flags & BLOCK_NEEDS_FREE) {
        // latches on high
        latching_incr_int(&aBlock->flags);
        return aBlock;
    
    //这里删掉了与垃圾回收（GC）相关的代码，GC不做讨论

    //4.如果是全局block，什么也不做，返回相同的block
    else if (aBlock->flags & BLOCK_IS_GLOBAL) {
        return aBlock;
    }

    // Its a stack block.  Make a copy.
    if (!isGC) {
        //5.能够走到这里，表明是一个栈Block。需要复制到堆上。第一步申请内存
        struct Block_layout *result = malloc(aBlock->descriptor->size);
        if (!result) return (void *)0;
        //6.将栈数据复制到堆上
        memmove(result, aBlock, aBlock->descriptor->size); // bitcopy first
        //7.更新block的flags
        //第一句后面的注释说它不是必须的。
        result->flags &= ~(BLOCK_REFCOUNT_MASK);    // XXX not needed
        //设置flags为BLOCK_NEEDS_FREE，表明它是一个堆block。内存支持它一旦引用计数=0，
        //就进行释放。 “|1”是用来把block的引用计数设置为1。
        result->flags |= BLOCK_NEEDS_FREE | 1;
        //8.block的isa指针设置为_NSConcreteMallocBlock
        result->isa = _NSConcreteMallocBlock;
        //9.如果block有copy helper函数就调用它（和block所持有对象的内存管理有关，文章后面会讲到这部分）
        if (result->flags & BLOCK_HAS_COPY_DISPOSE) {
            //printf("calling block copy helper %p(%p, %p)...\n", aBlock->descriptor->copy, result, aBlock);
            (*aBlock->descriptor->copy)(result, aBlock); // do fixup
        }
        return result;
    }
    else {
        //GC相关
    }
}

void _Block_release(void *arg) {
    //1.参数类型转换，转换为一个指向Block_layout结构体的指针。
    struct Block_layout *aBlock = (struct Block_layout *)arg;
    if (!aBlock) return;

    //2.取出flags中表示引用计数的部分，并且对它递减。
    int32_t newCount;
    newCount = latching_decr_int(&aBlock->flags) & BLOCK_REFCOUNT_MASK;
    //3.如果引用计数>0，表明仍然有对block的引用，block不需要释放
    if (newCount > 0) return;

    if (aBlock->flags & BLOCK_IS_GC) {
        //GC相关
    }
    //4.flags包含BLOCK_NEEDS_FREE（堆block），且引用计数=0
    else if (aBlock->flags & BLOCK_NEEDS_FREE) {
        //如果有copy helper函数就调用，释放block捕获的一些对象，对应_Block_copy_internal中的第9步
        if (aBlock->flags & BLOCK_HAS_COPY_DISPOSE)(*aBlock->descriptor->dispose)(aBlock);
        //释放block
        _Block_deallocator(aBlock);
    }
    //5.全局Block，什么也不做
    else if (aBlock->flags & BLOCK_IS_GLOBAL) {
        ;
    }
    //6.发生了一些奇怪的事情导致堆栈block视图被释放，打印日志警告开发者
    else {
        printf("Block_release called upon a stack Block: %p, ignored\n", (void *)aBlock);
    }
}






6. block可以用strong修饰吗
可以。类似copy，把block拷贝到堆上。




7. 解决循环引用时为什么要用__strong、__weak修饰
__weak 为了避免 retainCycle，⽽block 内部 __strong 则是在作⽤域 retain 持有当前对象
做⼀些操作，结束后会释放掉它。
具体可以看__weak原理




8. block发生copy时机
block 从栈上拷⻉到堆上⼏种情况：
	调⽤Block的copy⽅法
	将Block作为函数返回值时
	将Block赋值给__strong修饰的变量或Block类型成员变量时
	向Cocoa框架含有usingBlock的⽅法或者GCD的API传递Block参数时




9. Block访问对象类型的auto变量时，在ARC和MRC下有什么区别

简单来说：ARC下会对这个对象强引用，MRC下不会。
ARC下，由于block被自动copy到了堆区，从而对外部的对象进行强引用，如果这个对象同样强引用这个block，就会形成循环引用。
MRC下，由于访问的外部变量是auto修饰的，所以这个block属于栈区的，如果不对block手动进行copy操作，在运行完block的定义代码段后，block就会被释放，而由于没有进行copy操作，所以这个变量也不会经过Block_object_assign处理，也就不会对变量强引用。


10.Block原理是什么？本质是什么？
block本质是一个OC对象，内部也有一个isa指针，是封装了函数调用已经函数调用环境的OC对象



11._block的作用是什么？有什么使用注意点
将__block修饰的变量包装成对象,解决block内部无法修改auto变量的问题。需要注意内存管理



12.block的属性修饰符为什么是copy？使用block是哪些使用注意
block不使用copy，在栈上不会再堆上。