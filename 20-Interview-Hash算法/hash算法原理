hash算法原理

散列的概念
	散列方法的主要思想是根据结点的关键字值来确定其存储地址：
		存储：
			以关键字值K为自变量，通过一定的函数关系hash(K)---(散列函数)，计算出对应的函数值，把这个值解释为结点的存储地址，将结点存入到此存储单元中。
		检索：
			用上述同样的方法计算地址，然后找到响应的单元里去取要找的结点。通过散列方法可以对结点进行快速检索。
	散列（hash）是一种重要的存储方式，也是一种常见的检索方式。也可以用作加密明文，因为有这良好的不可逆性，在密码学中有这十分充分的应用。

	按散列存储方式构造的存储结构称为散列表（hash table）。散列表中的一个位置称为槽（slot），散列技术的核心是散列函数（hash function）。对任意给定的动态查找表，如果选定某个理想的散列函数及对应的散列表（hash table），则对应动态查找表的每个数据元素X。函数值h（X.key）就是X在散列表HT中的存储位置。插入（或建表）时数据元素X将被安置在该位置上，并且检索X时也到该位置上去查找。由散列函数决定的存储位置称为散列地址。因此，散列的核心就是：由散列函数决定关键字值X.key与散列地址hash(X.key)之间的对应关系，通过这个关系来实现存储与检索。

	一般情况下散列表的存储空间是一个一维数组HashTable[M]，散列地址的数组的下表。设计散列方法的目标就是设计某个散列函数hashFunction， 0<=hashFuction(X.key)<M;对关键字值X，得到HashTable[i] = X。一般散列表的空间必须必结点的集合大，因此虽然浪费一些空间，但是换区的是检索效率。
		M：散列表的空间大小
		N：填入表中的结点数（散列表的负载引子load factor）
	建立散列表时，若关键码与散列表是一对一对关系，则在检索时只需要根据散列函数对给定值进行运算，即可得到待查结点的存储位置。但是，散列函数可能对于不相等的关键字值计算出相同的散列地址，这种现象称为hash冲突，发生冲突的两个关键码称为该散列函数的同义词。在实际应用中，很少存在不产生冲突的散列函数，所以必须要考虑冲突发生时的处理办法。

	散列函数的特点：
		1、正向快速：给定关键字和散列函数，有限时间和资源内能计算出散列（hash）值
		2、逆向困难：只给定hash值，你很难逆向算出关键字。
		3、输入敏感：原始输入信息修改一点点，产生的hash值也能有较大的不同。
		4、冲突避免：你很难找到两个不同的关键字算出的散列值是相同的（发生冲突）。

散列函数
	以处理整型的关键字值为例，HashTable为M个元素。散列函数的选取原则是：运算尽可能简单；函数的值域必须在散列表的范围内；尽可能使得结点均匀分布，也就是尽量让不同的关键码具有不同的散列函数值。需要考虑各种因素：关键码长度、散列表大小、关键码分布情况、记录的检索频率等等。

	除余法
		用关键字值X除以M，并取余数作为散列地址。(整数相除比较简单，但是运行速度慢)
		散列函数为： h(x) ＝ x % M。

	乘余取整法
		用关键字值X.key乘上一个常数A（0 < A < 1），比如黄金比例0.618，提取乘积的小数部分。然后，再用整数n乘以这个值，对结果向下取整，把它作为散列的地址。
		散列函数为：hash(X.key) = _LOW( n × ( A × key % 1 ) )。其中，“A × key % 1”表示取 A × key 小数部分，即： A × key % 1 = A × key - _LOW(A × key), 而_LOW(X)是表示对X取下整
	平方取中法
		用关键字值X.key的平方值，扩大相近数的差别，然后根据表长度取中间的几位数作为散列函数值。因为一个乘积的中间几位数与乘数的每一位都相关，所以由此产生的散列地址比较均匀。
		关键字	关键字的平方	哈希函数值
		1234	1522756			227
		2143	4592449			924
		4132	17073424		734
		3214	10329796		297

	数字分析法
		假设关键字值集合中的每个关键字都是s位数字组成（u1,u2,u3,u4,un）分析关键字集合中的全体，并从中提取分布均匀的若干位或它们的组合作为地址。数字分析法是取数据元素关键字值中某些取值分散较均匀的数字位作为哈希地址的方法。即当关键字值的位数很多时，可以通过对关键字的各位进行分享，丢掉分布不均匀的位作为hash值。它只适用于所有关键字值已知的情况，通过分析分布情况把关键字取值区间转化为一个娇小的关键字取值区间。

		关键字值：K1=61317602 K2=61326875 K3=62739628 K4=61343634 K5=62706815 K6=62774638 K7=61381262 K8=61394220
		分析上述8个关键字可知，关键字从左到右的第1、2、3、6位取值比较集中，不宜作为哈希地址，剩余的第4、5、7、8位取值较均匀，可选取其中的两位作为哈希地址。设选取最后两位作为哈希地址，则这8个关键字的哈希地址分别为：2，75，28，34，15，38，62，20。

	基数转换法
		将关键字值看成另外一种进制的数再转换成原来进制的数值，然后选其中几位作为散列地址。
		例Hash(80127429)=(80127429) 13=8*13^7+0*13^6+1*13^5+2*13^4+7*13^3+4*132+2*13^1+9 = (502432641)10 
		如果取中间三位作为哈希值，得Hash（80127429）=432
		为了获得良好的哈希函数，可以将几种方法联合起来使用，比如先变基，再折叠或平方取中等等，只要散列均匀，就可以随意拼凑。

	折叠法
		如果关键字值所含的位数很多，采用平方取中法计算太复杂，可以将关键字值分隔成相同的几部分，然后取这几部分的叠加和作为新的关键字值进行散列函数。
		位叠加法：将分割后的几部分低位对齐叠加
		边界叠加法：从一端研分割界来回折叠，然后对齐相加。

冲突解决
	尽管散列函数的目标是使冲突最少，但实际上冲突无法避免。解决冲突的技术可以分为两类
		开散列方法（拉链法）：open hashing 
			把发生冲突的关键字值存储在散列表主表之外

		闭散列方法（开地址法）：close hashing
			把发生冲突的关键字值存储在表中另外一个槽slot内





















	https://www.jianshu.com/p/f9239c9377c5
	https://www.cnblogs.com/tanyui/p/14191064.html