SDWebImage

SDWebImage提供了支持缓存的异步图像下载，为UIImageView、UIButton、MKAnnotationView等控件添加了分类，是一个非常方便使用的网络加载图的第三方库。支持（JPEG、PNG、TIFF、BMP、包括GIF / APNG动画图像），甚至是iOS11之后到HEIC格式，iOS14之后的WebP格式，还有如BPG、AVIF、PDF、SVG等

主要提供的功能有：
	1.图片的缓存管理
	2.异步下载图片
	3.自动缓存过期处理的异步内存+磁盘图像缓存
	4.背景图像解压缩以避免帧率下降
	5.渐进式图像加载(包括动画图像,比如在Web浏览器中显示的GIF)
	6.缩略图图像解码以节省CPU和内存中的大图像 
	7.可扩展的图像编码器以支持大量图像格式,如WebP 
	8.在图像下载后可自定义变换并且组合变换
	9.可自定义和多个加载器系统以扩展功能,如照片库 
	等等

[图1]

上图是总体类图，包含了所有用到的类和关联

	各种分类：
		UIButton+WebCache：为UIButton类添加加载图片的方法。
		MKAnnotationView+WebCache：为MKAnnotationView类添加各种加载图片的方法。
		UIImageView+WebCache：为UIImageView类添加加载图片的方法。
		UIImageView+HighlightedWebCache：为UIImageView类添加高亮状态下加载图片的方法。

	工具类：
		NSData+ImageContentType：根据图片数据获取图片的类型，比如GIF、PNG等。
		UIImage+MultiFormat：根据UIImage的data生成指定格式的UIImage。
		UIImage+GIF：判断一张图是否为GIF。
		SDWebImageCompat：根据屏幕的分辨倍数成倍放大或者缩小图片的大小。
		SDImageCacheConfig：图片缓存策略记录。比如是否解压缩、是否允许iCloud、是否允许内存缓存、缓存时间等。
		SDWebImageCodersManager：编码解码管理器，处理多个图片编码解码任务，编码器是一个优先队列，这意味着后面添加的编码器将具有最高优先级。

	核心类：
		UIView+WebCache：所有的UIView及其子类都会调用这个分类的方法来完成图片加载的处理，同时通过UIView+WebCacheOperation分类来管理请求的取消和记录工作。
		SDImageCache：负责SDWebImage的整个缓存工作，是一个单例对象。缓存路径处理、缓存名字处理、管理内存缓存和磁盘缓存的创建和删除、根据指定key获取图片、存入图片的处理、根据缓存的创建和修改日期来删除缓存等。
		SDWebImageManager：拥有一个SDImageCache和SDWebImageDownloader属性，分别用于图片的缓存和加载处理。为UIView及其子类提供了加载图片的统一接口。
		SDWebImageDownloader：图片下载中心，管理下载队列。
		SDWebImageDownloaderOperation：用于下载图片，管理NSURLRequest对象请求头的封装、缓存、cookie的设置、加载选项的处理等。

[图3]
是SDWebImage的调用属性、方法流程图，暴露了有哪些可以使用的加载配置和回调代理。
	1.SDWeblmageOptions：是加载图片过程的配置参数，根据参数的不同可以获取做重试、低延时加载、渐进式加载、强制刷新缓存、后台继续加载、处理Cookie、SSL证书信任、下载队列优先级、错误展位图、转换动画、大尺寸图片兼容、缓存配置等等
	2.SDWeblmageManager：也可以直接从缓存加载图片，解码图片
	3.SDWebImagePrefetcher：预加载图片的一些操作，下载过程处在一个比较低的优先级。

[图2]
上图是SDWebImage图片加载的流程图，实现了图片的加载、数据处理、图片缓存等一系列工作
	1.对象调用暴露的接口方法sd_setImageWithURL()时，会再调用setImageWithURL:placeholderImage:options:方法，先把占位图placeholderImage显示，然后SDWebImageManager根据URL开始处理图片。
	2.SDImageCache类先从内存缓存查找是否有图片缓存，如果内存中已经有图片缓存，则直接回调到前端进行图片的显示。
	3.如果内存缓存中没有，则生成NSInvocationOperation添加到队列开始从硬盘中查找图片是否已经缓存。根据url为key在硬盘缓存目录下尝试读取图片文件，这一步是在NSOperation下进行的操作，所以需要回到主线程进行查找结果的回调。如果从硬盘读取到了图片，则将图片添加到内存缓存中，然后再回调到前端进行图片的显示。如果从硬盘缓存目录读取不到图片，说明所有缓存都不存在该图片，则需要下载图片。
	4.共享或重新生成一个下载器SDWebImageDownloader开始下载图片。图片的下载由NSURLConnection来处理，实现相关delegate来判断的下载状态：下载中、下载完成和下载失败。
	5.图片数据下载完成之后，交给SDWebImageDecoder类做图片解码处理，图片的解码处理在NSOperationQueue完成，不会阻塞主线程。在图片解码完成后，会回调给SDWebImageDownloader，然后回调给SDWebImageManager告知图片下载完成，通知所有的downloadDelegates下载完成，回调给需要的地方显示图片。
	6.最后将图片通过SDImageCache类，同时保存到内存缓存和硬盘缓存中。写文件到硬盘的过程也在以单独NSInvocationOperation完成，避免阻塞主线程。

一般问SDWebImage的加载流程，普遍是知道SDWebImage的加载流程是先从缓存中取图片，再从磁盘中取图片，最后再做下载。下载过程是如何保存到缓存中，保存在磁盘中，磁盘中以什么方式存储，什么方式命名，缓存中以什么方式存储，以什么方式命名，缓存满了如何处理？怎么管理缓存，怎么管理磁盘，什么时候删除缓存数据，什么时候删除磁盘数据。如何手动删除缓存中数据、如何手动删除磁盘中数据。带着问题来从头开始看。

入口函数
  sd_setImageWithURL所有类似方法的入口函数都是通过sd_internalSetImageWithURL:placeholderImage:optionscontext:setImageBlock:progress:completed:
  参数
  	url:图片下载网络地址。大部分用的url的地方前置会判断url为空的情况下直接return，并且会在下载动作前判断传入类型是NSString下转成NSURL（主要是类型强转的场景）
  	placeholderImage：展位图，多种情况下会使用，未加载图片前占位图、加载失败后占位图，通过SDWebImageOptions控制
  	SDWebImageOptions：缓存类型，有23种，用于处理是否缓存，怎么加载缓存（内存缓存memoryCache、磁盘缓存dickCache），强制刷新、失败重试等等情况，可以叠加使用
  	SDWebImageContext: 就是NSDictionary，方便自定义，在整个加载流程中一直优先以SDWebImageContext传入的内容优先，没有则通过SDWebImage内部提供的属性替换
  	```
		SDWebImageContextOption const SDWebImageContextSetImageOperationKey = @"setImageOperationKey"; // 通过validOperationKey取消正在运行的任务
		SDWebImageContextOption const SDWebImageContextCustomManager = @"customManager"; // 初始化SDWebImageManager
		SDWebImageContextOption const SDWebImageContextCallbackQueue = @"callbackQueue"; // Cache、Manager、Loader的回调，可以控制回调，不如不在主队列回调
		SDWebImageContextOption const SDWebImageContextImageCache = @"imageCache";// 如果您想在图像加载期间指定自定义缓存,则无需重新创建具有缓存的假SDWebImageManager实例
		SDWebImageContextOption const SDWebImageContextImageLoader = @"imageLoader"; // 实现自定义图片加载器
		SDWebImageContextOption const SDWebImageContextImageCoder = @"imageCoder"; // 实现自定义图片解码器
		SDWebImageContextOption const SDWebImageContextImageTransformer = @"imageTransformer"; // 自定义图片加载出来的效果动画
		SDWebImageContextOption const SDWebImageContextImageDecodeOptions = @"imageDecodeOptions"; // 解码相关选项
		SDWebImageContextOption const SDWebImageContextImageScaleFactor = @"imageScaleFactor"; // 解码的时候自定义比例图像缩放比 2x,3x，默认是屏幕的缩放
		SDWebImageContextOption const SDWebImageContextImagePreserveAspectRatio = @"imagePreserveAspectRatio";// 控制在为图像生成缩略图时是否要强制缩略图具有与原始图像相同的纵横比
		SDWebImageContextOption const SDWebImageContextImageThumbnailPixelSize = @"imageThumbnailPixelSize"; // 加载图像时指定生成缩略图的最大像素大小。将解码并缓存缩略图,并在回调中返回缩略图,而原始数据将保留在磁盘上。
		SDWebImageContextOption const SDWebImageContextImageTypeIdentifierHint = @"imageTypeIdentifierHint";// 为图像提供文件扩展名或UTI提示,以帮助图像解码器选择正确的图像格式解析器。
		SDWebImageContextOption const SDWebImageContextImageEncodeOptions = @"imageEncodeOptions"; // 通过编码选项自定义图像数据的编码方式。
		SDWebImageContextOption const SDWebImageContextQueryCacheType = @"queryCacheType";// 指定SDWebImage从哪个缓存(内存缓存,磁盘缓存或两者)加载图像数据。
		SDWebImageContextOption const SDWebImageContextStoreCacheType = @"storeCacheType"; // 指定下载的图像数据应存储在哪个SDWebImage缓存(内存,磁盘或两者)中。
		SDWebImageContextOption const SDWebImageContextOriginalQueryCacheType = @"originalQueryCacheType"; // 指定在使用图像转换器时,SDWebImage应首先从哪个缓存(内存,磁盘或两者)中加载原始图像数据。
		SDWebImageContextOption const SDWebImageContextOriginalStoreCacheType = @"originalStoreCacheType"; // 指定在使用图像转换器时,SDWebImage应首先将原始图像数据存储在哪个缓存(内存,磁盘或两者)中。
		SDWebImageContextOption const SDWebImageContextOriginalImageCache = @"originalImageCache"; // 自定义缓存来控制原始图像数据的加载和存储。转换后的图像将继续使用SDWebImage的默认内存和磁盘缓存。
		SDWebImageContextOption const SDWebImageContextAnimatedImageClass = @"animatedImageClass"; // 自定义的动画图像类以提高性能。SDWebImage会尝试使用此类来解析动画图像数据,而不是默认的UIImage。
		SDWebImageContextOption const SDWebImageContextDownloadRequestModifier = @"downloadRequestModifier"; // 自定义的请求修改器来操作SDWebImage进行的图像下载请求。
		SDWebImageContextOption const SDWebImageContextDownloadResponseModifier = @"downloadResponseModifier"; // 自定义的响应修改器来操作SDWebImage执行的图像下载响应。
		SDWebImageContextOption const SDWebImageContextDownloadDecryptor = @"downloadDecryptor"; // 自定义的数据解密器来解密SDWebImage下载的图像数据。
		SDWebImageContextOption const SDWebImageContextCacheKeyFilter = @"cacheKeyFilter"; // 自定义的缓存键过滤器,以生成SDWebImage用于图像缓存的密钥。
		SDWebImageContextOption const SDWebImageContextCacheSerializer = @"cacheSerializer"; // 自定义的缓存序列化器来序列化/反序列化SDWebImage用于磁盘缓存的图像数据。
  	```


 ```
 ```

