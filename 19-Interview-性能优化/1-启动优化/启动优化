启动优化


# Mach-O
	Mach-O（Mach object） 是Mac\iOS上用于存储程序、库的标准格式,是针对不同运行时可执行文件的文件类型。
```
#define MH_OBJECT   0x1     /* Target 文件：编译器对源码编译后得到的中间结果 */
#define MH_EXECUTE  0x2     /* 可执行二进制文件 */
#define MH_FVMLIB   0x3     /* VM 共享库文件（还不清楚是什么东西） */
#define MH_CORE     0x4     /* Core 文件，一般在 App Crash 产生 */
#define MH_PRELOAD  0x5     /* preloaded executable file */
#define MH_DYLIB    0x6     /* 动态库 */
#define MH_DYLINKER 0x7     /* 动态连接器 /usr/lib/dyld */
#define MH_BUNDLE   0x8     /* 非独立的二进制文件，往往通过 gcc-bundle 生成 */
#define MH_DYLIB_STUB   0x9     /* 静态链接文件（还不清楚是什么东西） */
#define MH_DSYM     0xa     /* 符号文件以及调试信息，在解析堆栈符号中常用 */
#define MH_KEXT_BUNDLE  0xb     /* x86_64 内核扩展 */
```
## 常见Mach-O文件类型
	MH_OBJECT
		1.目标文件（.o）
		2.静态库文件(.a），静态库其实就是N个.o合并在一起的
	MH_EXECUTE:可执行文件
		.app/xx
	MH_DYLIB:动态库文件
		.dylib
		.framework/xx
	MH_DYLINKER:动态链接编辑器
		/usr/lib/dyld
	MH_DSYM:存储着二进制文件符号信息的文件
		.dSYM/Contents/Resources/DWARF/xx（常用于分析APP的崩溃信息）
只有MH_EXECUTE、MH_DYLIB、MH_BUNDLE这3种类型的mach-o才能被dyld加载，其余的类型都会抛出错误。

.o文件编译生成过程：
[图1]

## Mach-O基本结构
[Mac-O](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/MachOTopics/0-Introduction/introduction.html)
一个Mach-O文件包含3个主要区域：
	1.Header：保存文件的基本信息，如文件类型、CPU架构信息、加载命令个数等。
	2.Load commands：根据这里的数据确定内存分布(本身不包含数据，类似于一个指针)。
	3.Raw segement data：存放具体的代码和数据，是Mach-O文件真正的内容数据。

## 如何查看Mach-O的结构
	1.file:查看Mach-O的文件类型
		```
		file 文件路径
		```
	2.otool:查看Mach-O特定部分和段的内容
	3.lipo：常用语多框架Mach-O文件处理
		3.1、查看架构信息：lipo -info 文件路径
		3.2、导出某种特定架构：lipo 文件路径 -thin 架构类型 -output 输出文件路径
		3.3、合并多种架构：lipo 文件路径1 文件路径2 -output 输出文件路径
	4.GUI工具 MachOView（https://github.com/gdbinit/MachOView）
