
1.category的使用场合是什么？



2.category的实现原理是什么？
category编译之后的底层结构是 struct category_t结构体，里面存储着分类的对象方法、类方法、协议、属性等信息。
在程序运行的时候，runtime会根据category的数据，合并到类信息中（类对象，元类对象）





3.category和Class Extension的区别是什么
category在runtime的时候讲数据合并到类信息中
class extension在编译的时候已经将信息包含在类信息中





4.Category中有load方法吗？load方法是什么时候调用的？load方法能继承吗？
load在rumtime加载类的时候调用
load方法可以继承，一般情况不会主动调用load，让系统自动调用





5.load，initialize方法的区别是什么？它们在category中调用的顺序？以及出现继承时他们之间的调用过程？
区别：
调用方式的区别：
	1.load是根据函数地址直接调用
	2.initialize是通过objc_msgSend调用
调用时刻：
	1.load是runtime加载类，分类的时候调用，只会调用一次
	2.initialize是类第一次接受到消息的时候调用，每个类智慧initialize一次（子类没实现initialize的话，父类initialize可能会被掉哟ing多次）

调用顺序：
	1.load
	先调用类的load。
	先编译的类，优先调用load
	调用子类的load之前，会先调用父类的load
	再调用分类的load
	先编译的分类，优先调用

	2.initialize
	先初始化父类
	再初始化子类（子类没实现initialize方法，会调用父类的initialize）




6.Category能否添加成员变量？如果可以，如何给category添加成员变量？
不能直接给category添加成员变量，但是可以通过关联对象添加成员变量。
objc_setAssociatedObject(self, @selector(), value, OBJECT_ASSOCIATION_XXX_NONATOMIC);
objc_getAssociatedObject(self, @selector())


7.category如何被加载的,两个category的load⽅法的加载顺序，两个category的同名⽅法的加载顺序

 objc_init -> load_images -> prepare_load_methods -> schedule_class_load -> add_class_to_loadalble_list -> add_category_to_loadable_list -> call_load_methods -> call_class_loads -> call_category_loads

void attachLists(List* const * addedLists, uint32_t addedCount) {
    if (addedCount == 0) return;

    if (hasArray()) {
        // many lists -> many lists
        uint32_t oldCount = array()->count;
        uint32_t newCount = oldCount + addedCount;
        setArray((array_t *)realloc(array(), array_t::byteSize(newCount))); // 重新分配内存
        array()->count = newCount;
        memmove(array()->lists + addedCount, array()->lists, 
                oldCount * sizeof(array()->lists[0])); // 扩容
        memcpy(array()->lists, addedLists, 
               addedCount * sizeof(array()->lists[0]));// 扩容后复制新增的(也就意味着相同方法，会先调用后编译的分类)
    }
    else if (!list  &&  addedCount == 1) {
        // 0 lists -> 1 list
        list = addedLists[0];
    } 
    else {
        // 1 list -> many lists
        List* oldList = list;
        uint32_t oldCount = oldList ? 1 : 0;
        uint32_t newCount = oldCount + addedCount;
        setArray((array_t *)malloc(array_t::byteSize(newCount)));
        array()->count = newCount;
        if (oldList) array()->lists[addedCount] = oldList;
        memcpy(array()->lists, addedLists, 
               addedCount * sizeof(array()->lists[0]));
    }
}

所以category的属性总是在前面，baseClass的属性被往后偏移了。
后编译的category会先add到数组的前面


8. category & extension区别，能给NSObject添加Extension吗，结果如何

category:
运行时添加分类属性/协议/方法 
分类添加的方法会“覆盖”原类方法，因为方法查找的话是从头至尾，一旦查找到了就停止了 
同名分类方法谁生效取决于编译顺序，image 读取的信息是倒叙的，所以编译越靠后的越先读入 
名字相同的分类会引起编译报错;

extension:
编译时决议
只以声明的形式存在，多数情况下就存在于 .m 文件中; 不能为系统类添加扩展








