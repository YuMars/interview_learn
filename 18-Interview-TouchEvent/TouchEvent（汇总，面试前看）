iOS点击触摸事件


# 响应链是什么时候怎样构建的

    ## 延生内容：
    ### 物理层面事件的生成；
    iPhone 采用电容触摸传感器，利用人体的电流感应工作，由一块四层复合玻璃屏的内表面和夹层各涂有一层导电层，最外层是一层矽土玻璃保护层。当我们手指触摸感应屏的时候，人体的电场让手指和触摸屏之间形成一个耦合电容，对高频电流来说电容是直接导体。于是手指从接触点吸走一个很小的电流，这个电流分从触摸屏的四脚上的电极流出，并且流经这四个电极的电流和手指到四个电极的距离成正比。控制器通过对这四个电流的比例做精确的计算，得出触摸点的距离。
    ### iOS 操作系统下封装和分发事件
    iOS 操作系统看做是一个处理复杂逻辑的程序，不同进程之间彼此通信采用消息发送方式，即 IPC (Inter-Process Communication)。现在继续说上面电容触摸传感器产生的 Touch Event，它将交由 IOKit.framework 处理封装成 IOHIDEvent 对象；下一步很自然想到通过消息发送方式将事件传递出去，至于发送给谁，何时发送等一系列的判断逻辑又该交由谁处理呢？

    答案是 SpringBoard.app，它接收到封装好的 IOHIDEvent 对象，经过逻辑判断后做进一步的调度分发。例如，它会判断前台是否运行有应用程序，有则将封装好的事件采用 mach port 机制传递给该应用的主线程。

    Port 机制在 IPC 中的应用是 Mach 与其他传统内核的区别之一，在 Mach 中，用户进程调用内核交由 IPC 系统。与直接系统调用不同，用户进程首先向内核申请一个 port 的访问许可；然后利用 IPC 机制向这个 port 发送消息，本质还是系统调用，而处理是交由其他进程完成的。

    ### IOHIDEvent -> UIEvent
    应用程序主线程的 runloop 申请了一个 mach port 用于监听 IOHIDEvent 的 Source1 事件，回调方法是 __IOHIDEventSystemClientQueueCallback()，内部又进一步分发 Source0 事件，而 Source0 事件都是自定义的，非基于端口 port，包括触摸，滚动，selector选择器事件，它的回调方法是 __UIApplicationHandleEventQueue()，将接收到的 IOHIDEvent 事件对象封装成我们熟悉的 UIEvent 事件；然后调用 UIApplication 实例对象的 sendEvent: 方法，将 UIEvent 传递给 UIWindow 做一些逻辑判断工作：比如触摸事件产生于哪些视图上，有可能有多个，那又要确定哪个是最佳选项呢？ 等等一系列操作。这里先按下不表。

iOS的事件有好几种：
    Touch Events(触摸事件)
    Motion Events(运动事件，比如重力感应和摇一摇等)、
    Remote Events(远程事件，比如用耳机上得按键来控制手机)
    
无论是哪种事件，其传递和响应都与响应链息息相关，那么响应链到底是一个什么样的东西呢？ 
在UIKit中有一个类：UIResponder，我们可以看看头文件的几个属性和方法：

@interface UIResponder : NSObject <UIResponderStandardEditActions>
@property(nonatomic, readonly, nullable) UIResponder *nextResponder;
@property(nonatomic, readonly) BOOL canBecomeFirstResponder;    // default is NO
- (BOOL)becomeFirstResponder;
@property(nonatomic, readonly) BOOL canResignFirstResponder;    // default is YES
- (BOOL)resignFirstResponder;
@property(nonatomic, readonly) BOOL isFirstResponder;

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(nullable UIEvent *)event;
- (void)touchesEstimatedPropertiesUpdated:(NSSet<UITouch *> *)touches API_AVAILABLE(ios(9.1));

UIResponder是所有可以响应事件的类的基类，其中最常见的UIView、UIViewController、UIApplication都是其子类或者说是响应事件的载体。
响应链的传递，UIResponder做了很多事情。只有继承了UIResponder的对象才能接受并处理事件，我们称之为“响应者对象”。在app中，所有视图都是按照一定的结构组织起来的，即树状层次结构，每个view都有自己的superview，包括controller的topmost view。当一个view被add到superview上，他的nextresponder属性就指向他的superview。controller的self.view指向其对应的controller，controller的nextrespond指向self.view的superview。这样app就通过nextresponder串成一条链，也就是我们说的响应链。响应链就是一条虚拟的链，并没有一个对象来专门存储这样的一条链，而是通过UIResponder的属性串连起来的。
initial view -> view -> View Controller -> Window -> Application
initial view -> view -> View Controller -> view -> Window -> Application

事件传递中UIWindow会根据不同的event，用不同的方式寻找initial object，initial object决定与当前事件类型。比如Touch Event，UIWindow会首先通过hitTest:withEvent:尝试把事件传递给事件发生的View。对于Motion和Remote Event，这里先按下不表。
有了事件响应链，接下来是寻找响应事件的具体响应者Hit-Testing View，寻找这个view的过程成为Hit-Test。具体就是下面UIView的函数
- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event; 
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event;

UITouch对象
	当用户用一根手指触摸屏幕时，会创建一个与手指相关的UITouch对象
	如果两根手指同时触摸一个view，那么view只会调用一次touchesBegan:withEvent:方法，touches参数中装着2个UITouch对象
	如果这两根手指一前一后分开触摸同一个view，那么view会分别调用2次touchesBegan:withEvent:方法，并且每次调用时的touches参数中只包含一个UITouch对象
UITouch的作用
	保存着跟手指相关的信息，比如触摸的位置、时间、阶段
	当手指移动时，系统会更新同一个UITouch对象，使之能够一直保存该手指在的触摸位置
	当手指离开屏幕时，系统会销毁相应的UITouch对象

# 事件第一个响应者是怎么确定的



上图左边所示图层关系。


如果点击viewB1和viewA2。递归方式如下图

手指触摸屏幕，UIApplication接收到手指事件，调用UIWindow的hitTest:withEvevt:，判断是否在window内，并且继续调用subview的hitTest:withEvevt:方法，知道找到最后的view。调用结束并且确定hit-test view后，view和view上的手势汇合一个UITouch对象关联起来，UITouch作为事件传递的参数，里面有view和gestureRecongizer属性。
下面来看看hit-test递归调用流程
hitTest:withEvevt:从Window开始，判断当前位置是否在window内，如果在则遍历subview，然后依次对subview发送hitTest:withEvevt:（subview的index越大越先被访问）。如果point没有在view上，subview也不会进行遍历，直到没有subview了，那么这个就是我们要找到hittest-view

- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event {
    // 1.视图可交互、未隐藏
    if (self.userInteractionEnabled == NO ||
        self.hidden == YES ||
        self.alpha <= 0.01) {
        return nil;
    }
    
    // 2.判断点击事件在视图内
    if ([self pointInside:point withEvent:event] == NO) {
        return nil;
    }
    
    // 3.已经确定当前视图可以响应的前提下，询问子视图
    NSUInteger count = self.subviews.count;
    for (int i = 0; i < count; i++) {
        UIView *childV = self.subviews[i];
        CGPoint childPoint = [self convertPoint:point toView:childV];
        UIView *fitView = [childV hitTest:childPoint withEvent:event];
        
        if (fitView) {
            return fitView;
        }
    }
    
    return self;
}

（这里可以通过hitTest扩大按钮的手势区域）


#事件第一个响应者确定后，系统是怎样传递事件的

通过响应链，找到第一响应事件的对象，将消息发送给这个响应者，UIApplication、UIWindow、UIControl有sendEvent:方法，UIApplication通过这个方法发给UIWindow，然后UIWindow通过sendEvent:把事件发送给hit-test view。通过在view的hitTest:withEvevt:打断点，然后bt查看函数调用树可以看到，整个触摸事件的函数调用链路。

* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
* frame #0： 0x800000010275164c TouchEvent’-[HitTestview hitTest:withEvent:1(se1f=0x800000156de5dde，
_cmd-"hitTest:withEvent:", point=(x = 148.66666666666666, y = 258.33333333333331),
event=0x0000600003270680） at HitTestView.m：14:9
frame #1: 0x000000010a088b4 UIKitCore'-[UIView(Geometry) _hitTest:withEvent:windowServerHitTestwindow:] +
80
frame #2: 0x000000010a087a8 UIKitCore'
_38-[UIView (Geometry) hitTest:withEvent: ]_block_invoke + 108
frame #3: 0x0000000180376d94 CoreFoundation*_-NSARRAY_IS_CALLING_OUT_TO_A_BLOCK_.
+ 16
frame #4: 0x00000001802f904 CoreFoundation'-[__NSArrayM enumerateObjectsWithOptions:usingBlock:] + 460
frame #5: 0x000000010a0e851c UIKitCore'-[UIView(Geometry) hitTest:withEvent: ] + 680
frame #6: 0x000000010a088b4 UIKitCore'-[UIView(Geometry) _hitTest:withEvent :windowServerHitTestWindow:] + 80 frame #7: 0x000000010a0e87a8 UIKitCore'
_38-[UIView (Geometry) hitTest:withEvent:]_block_invoke + 108
frame #8: 0×0000000180376d94 CoreFoundation'
_NSARRAY_IS_CALLING_OUT_TO_A_BLOCK_
+ 16
frame #9: 0×00000001802d904 CoreFoundation'-[_
_NSArrayM enumerateObjectsWithOptions:usingBlock: ] + 460
frame #10: 0x000000010a0e851c UIKitCore
-[UIView(Geometry) hitTest:withEvent:] +680
frame #11: 0x000000010a0b6c20 UIKitcore’-[UIDropShadowview hitTest:withEvent:]+ 216
frame #12: 0x00e000010a0e88b4 UIKitcore’-[UIview(Geometry)_hitTest:withEvent:windowserverHitTestwindow：] + 8
rame #13: Bx000000019aGe87a8 UIkitcore’-_38-[UTView(Geometry) hitTest: withEvent:1_block_invoke + 108
frame #14： 9x0060060180376d94 coreFoundation’-_NSARRAY _IS_CALLING_OUT_TO_A_BLOCK_-+16
frame #15: 0x9eee0001802fd994 CoreFoundation’-[ NSArrayM enumerateObjectsWithoptions: usingBlock:]+460
frame #16: 日xeeee00010aee851c UIKitCore'-[UIview( Geometry) hitTest:withEvent: ] + 680
frame #17: 0x000000010a0cac70 UIKitCore
-[UITransitionview hitTest: withEvent:] +
48
frame #18: 0x000000010a0e884 UIKitCore
‘-[UIview( Geometry) _hitTest :withEvent:windowserverHitTestwindow：] +80
frame #19: 0x000000010a087a8 UIKitCore'
_38-[UIView (Geometry) hitTest:withEvent:1_block_invoke + 108
frame #20: 0x0000000180376d94 CoreFoundation*__NSARRAY_IS_CALLING_OUT_TO_A_BLOCK_- + 16
frame #21: 0x00000001802d904 CoreFoundation'-[__NSArrayM enumerateObjectsWithOptions:usingBlock:] + 460
frame #22: 0x000000010a0851c UIKitCore*-[UIView(Geometry) hitTest:withEvent:] + 680 frame #23: 0x000000010a088b4 UIKitCore*-[UIView(Geometry)
_hitTest:withEvent:windowServerHitTestWindow:]+ 80
frame #24: 0x0000000109cab960 UIKitCore'-[UIWindow _hitTestLocation: sceneLocationz: inScene:withWindowServerHitTestwindow:event:] + 92 frame #25: 0x0000000109cab7d0 UIKitCore'
--75+[UIWindow _hitTestToPoint:scenePointz:forEvent:windowserverHitTestwindow:J_block_invoke + 64
frame #26: 0x0000000109e93804 UIKitCore
__64-[UIWindowScene _topVisibleWindownumeratingAsCopy:passingTest:1_block_invoke + 108
frame #27: 0x0000000109939c0 UIKitCore'-[UIWindowScene_enumerateWindowsIncludingInternalWindows:onlyVisibleWindows:asCopy:stopped:withBlock:]+308
frame #28： 0x0ece00610ge93718 UIKitcore’-[UIwindowscene _topvisiblewindowEnumeratingAsCopy :passing Test: ] + 372
frame #29: 0x0000000109cab73c UIKitcore'+[UIWindow _hitTestToPoint:scenePointz：forEvent:windowserverHitTestwindow： ] + 192
frame #30: 0x00e0000109caba40 UIKitcore’-[UIwindow _targetwindowForPathIndex:atPoint:scenePointz:forEvent:windowServerHitTestwindow：] +184
frame #31: 0x0000000109c5d8 UIKitCore
-updateToucheswithDigitizerEventAndDetermineIfshouldsend_block_invoke.27 +5380
frame #32: 0x0000000109d05f50 UIKitCore
UIEventHIDEnumerateChildren + 160
frame #33: 0x0000000109cf877c UIKitCore _-dispatchPreprocessedEventFromEventQueue + 2232 frame #34: 0x0000000109cf5d0 UIKitCore' __processEventQueue + 5612 frame #35: 0x0000000109cf44ac UIKitCore' _eventFetcherSourceCallback + 220 frame #36: 0×000000018037318c CoreFoundation'
__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION_.
_ + 24
frame #37: 0x00000001803730d4 CoreFoundation'
__CFRunLoopDoSource + 172
frame #38: 0x0000000180372844 CoreFoundation'
__ CFRunLoopDoSources® + 232
frame
#39: 0x000000018036ceb0 CoreFoundation'
CFRunLoopRun + 756
frame #40: 0x000000018036c7a4 CoreFoundation'CFRunLoopRunSpecific + 584
frame #41: 0x0000000188f7c98 GraphicsServices'GSEventRunModal+160
frame #42: 0x0000000109c6237c UIKitCore'-[UIApplication_run]+ 868
frame #43： 0x9000900109c66374 UIKitcore'UIApplicationMain + 124
frame #44: Qx0000000102751af4 TouchEvent'main(argc=1, argv=0x000000016d6adbf8) at main.m:17:12
frame #45: 0x0000000102a6dfa0 dvld sim start sim + 20
frame #46: 0x000ggg0102859e50 dvld start +2544


找到最合适的视图控件后，就会调用控件的touches方法来作具体的事件处理touchesBegan:touchesMoved:touchedEnded:这些touches方法的默认做法是将事件顺着响应者链条向上传递。

事件处理的整个流程总结：
　　1.触摸屏幕产生触摸事件后，触摸事件会被添加到由UIApplication管理的事件队列中（即，首先接收到事件的是UIApplication）。
　　2.UIApplication会从事件队列中取出最前面的事件，把事件传递给应用程序的主窗口（keyWindow）。
　　3.主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件。（至此，第一步已完成)
　　4.最合适的view会调用自己的touches方法处理事件
　　5.touches默认做法是把事件顺着响应者链条向上抛。

- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {
    // 默认会把事件传递给上一个响应者,上一个响应者是父控件,交给父控件处理
    [super touchesBegan:touches withEvent:event];
    // 注意不是调用父控件的touches方法，而是调用父类的touches方法
    // super是父类 superview是父控件 
}

事件的传递与响应：
1、当一个事件发生后，事件会从父控件传给子控件，也就是说由UIApplication -> UIWindow -> UIView -> initial view,以上就是事件的传递，也就是寻找最合适的view的过程。
2、接下来是事件的响应。首先看initial view能否处理这个事件，如果不能则会将事件传递给其上级视图（inital view的superView）；如果上级视图仍然无法处理则会继续往上传递；一直传递到视图控制器view controller，首先判断视图控制器的根视图view是否能处理此事件；如果不能则接着判断该视图控制器能否处理此事件，如果还是不能则继续向上传 递；（对于第二个图视图控制器本身还在另一个视图控制器中，则继续交给父视图控制器的根视图，如果根视图不能处理则交给父视图控制器处理）；一直到 window，如果window还是不能处理此事件则继续交给application处理，如果最后application还是不能处理此事件则将其丢弃
3、在事件的响应中，如果某个控件实现了touches...方法，则这个事件将由该控件来接受，如果调用了[supertouches….];就会将事件顺着响应者链条往上传递，传递给上一个响应者；接着就会调用上一个响应者的touches….方法


# UIGestureRecognizer
谈到响应事件，一定会想到各种手势识别。当屏幕上发生一次触摸之后，系统会如何寻找「第一响应者」，在寻找到「第一响应者」之后，如何确定「响应链」以及如何沿「响应链」传递事件。在我们平时的开发中想要给一个 UIView加上处理事件的能力的话，使用UIGestureRecognizer 及其子类比继承一个UIView 的类、重写touches方法要方便的很多。这两种方法对事件的处理机制相互影响又有所不同。

下事件传递及响应链的大致流程：
1.通过「命中测试」来找到「第一响应者」
2.由「第一响应者」来确定「响应链」
3.将事件沿「响应链」传递
4.事件被某个响应者接收，或没有响应者接收从而被丢弃


在步骤 3 中，事件沿「响应链」传递这个过程，就是响应者通过调用其 next的touches 系列方法来实现的。我们使用 UIControl等类作为响应者，这些类本身就不会调用其 next的touches系列方法，从而实现阻断响应链的效果，也可以认为是实现接受某个事件的效果。下面来看UIGestureRecognizer参与的情况下，事件的处理和接收是如何运作的。

[图]

通过hitTest:withEvent:找到的第一响应者之后，会将UITouch分发给UIResponder的touches系列方法，同时也会分发给手势识别系统，让这两个处理系统同时工作。
（首先要注意的是，上图中蓝色部分的流程并不会只执行一次，举例来说：当我们用一根手指在一个视图上缓慢滑动时，会产生一个 UITouch 对象，这个 UITouch 对象会随着你手指的滑动，不断的更新自身，同时也不断地触发 touches 系列方法。）
UITouch的gestureRecognizers属性中存储了收到的手势，在不断触发touches系列方法过程中不听的判断UITouch是否符合收到某个手势。
	手势识别成功：被触摸的hit-testView会收到touchesCanCelled消息，并且该视图不会在收到UITouch的touches时间。同时让该UITouch关联的其他手势也收到touchedCancelled，并且之后不再受到此UITouch的touches事件。这样做就实现了该识别到的手势能够独占该 UITouch。
		touchesBegan     // 手指触摸屏幕
		touchesMoved     // 手指在屏幕上移动
		touchesMoved     // ...
		...
		touchesMoved     // ...
		touchesMoved     // 手指在屏幕上移动
		// touchesEnded     // 手指离开屏幕
		touchesCancelled // 手势识别成功，touches 系列方法被阻断
		手势识别未成功：指暂时未识别出来，不代表以后不会识别成功，不会阻断响应链。注意这里指的是未成功，并不一定是失败。在手势的内部状态中，手势大部分情况下状态是 .possible，指的是UITouch 暂时与其不匹配，但之后可能有机会识别成功。而 .fail 是真的识别失败，指的是以目前的触摸情况来看已经不可能是这个手势了，并且在下个runloop 会从 gestureRecognizers 中移除该手势。



[图]

1.图中我们可以看到，不到手势的情况下，手指按下去的时候，响应者的touchBegin:方法会触发，随着手指的移动，touchMoved:会不断触发，当手指移动结束并且抬起，touchEnded会触发。在这个过程中，我们接收到一直是一个不断更新UITouch
2.在该视图添加一个UIPanGestureRecognizer的手势下，可以看到手势识别系统在手指按下一刻就开始工作，前半段一直处于识别状态，拖动一定距离后，手势识别系统确定该UITouch所做的动作是符合UIPanGestureRecognizer的特点，于是就给该视图的响应链发送了touchCancelled的信息，从而阻止这个UITouch继续触发这个视图的touches系列方法（同时也取消了别的相关手势的touches 系列方法，图中未体现）。在这之后，被调用的只有与手势关联的 target-action方法（也就是图中的墨绿色节点 call PanFunction）。

手势的不同应用属性
1.cancelsTouchesInView: 默认是true。如果设置成false，当手势识别成功时，不会发送touchesCancelled给目标视图，从而不会打断视图本身方法的触发，最后结果是手势和Touches系列方法同时触发。如果不希望手势覆盖本身Touches系列方法，可以修改这个属性
2.delaysTouchesBegan: 默认是fasle。在手指触摸屏之后，手势处于possible状态时，视图的touches系列方法已经开始触发，当手势识别成功后，才会取消视图的touches系列方法。当这个属性是true时，视图的touches方法会被延迟到手势识别成功或者失败才开始，也就是说，假如该属性为true，在整个过程中识别手势又是成功的，视图的touches系列方法不会触发。
3.delaysTouchesEnded:默认是true，这种情况下发生一个touch时，在手势识别成功后,发送给touchesCancelled消息给hit-testview，手势识别失败时，会延迟大概0.15ms,期间没有接收到别的touch才会发送touchesEnded。如果设置为NO，则不会延迟，即会立即发送touchesEnded以结束当前触摸


UIControl与手势识别
UIControl接收target-action方法的方式是在其touches方法中识别、接收、处理，而手势的touches方法一定比其所在视图的touches方法早触发。也就是手势识别的优先级比UIControl自身处理事件的优先级高。
比如UIControl同时加了touchupinside方法和UITapgrestureRecognizer，点击这个UIControl会触发手势关联的方法，并且给UIControl发送touchCancelled，导致自身的处理时机被中断，从而没能触发touchupinside。也就是UITapgrestureRecognizer>touchupinside

同时这样的机制可能会导致一个问题：当我们给一个已经拥有点击手势的视图，添加一个 UIControl作为子视图，那么我们无论怎么给该 UIControl 添加点击类型的 target-action 方法，最后的结果都是触发其父视图的手势（因为在命中测试的过程中收集到了这个手势），并且中断 UIControl 的事件处理，导致添加的 target-action方法永远无法触发。UITouch在寻找第一响应者的时候，会把整条响应链上的手势收集在自身的 gestureRecognizers 数组中，当找到第一响应者之后，在每次第一响应者触发 touches 方法之前，会先触发 UITouch 手势数组里手势的 touches 方法

那其实🍎已经给我们做了一个解决方案,UIKit 对部分控件（同时也是 UIControl 的子类）做了特殊处理，当这些控件的父视图上有与该控件冲突功能的手势时，会优先触发控件自身的方法，不会触发其父视图上的那个手势。

也举个例子来说：当我们给一个已经拥有点击手势的视图，添加一个 UIButton 作为子视图，并且给按钮添加点击类型的 target-action 方法，那么当点击按钮时，按钮的 target-action 方法会触发，手势的方法会被忽略。
并且文档中也提到了，如果不想要这种情况发生，那就应当把手势添加到目标控件上（因为手势比控件更早识别到事件，也就是上文提到的给 UIControl 添加了.touchupInside方法的例子），这样的话生效的就是手势了。











